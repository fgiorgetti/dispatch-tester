##
## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements.  See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership.  The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License.  You may obtain a copy of the License at
##
##   http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing,
## software distributed under the License is distributed on an
## "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
## KIND, either express or implied.  See the License for the
## specific language governing permissions and limitations
## under the License
##

# See the qdrouterd.conf (5) manual page for information about this
# file's format and options.

container {
    workerThreads: 4
    containerName: Qpid.Dispatch.Router.B
    saslConfigPath: /home/kgiusti/work/dispatch-tester/qpidd/sasl2
    saslConfigName: qpidd
}

router {
    mode: interior
    routerId: Router.B
}

ssl-profile {
    name: ssl-dispatch-server
    cert-db: /home/kgiusti/work/dispatch-tester/SSL/test_cert_dir/ca_cert.pem
    cert-file: /home/kgiusti/work/dispatch-tester/SSL/test_cert_dir/router-server-certificate.pem
    key-file: /home/kgiusti/work/dispatch-tester/SSL/test_cert_dir/router-server-private-key.pem
    password: password
}

listener {
    addr: 127.0.0.1
    port: 8888
    saslMechanisms: EXTERNAL
    authenticatePeer: yes
    requireEncryption: yes
    requireSsl: yes
    maxFrameSize: 16384
    ssl-profile: ssl-dispatch-server
}

listener {
    role: inter-router
    addr: 127.0.0.1
    port: 20001
    saslMechanisms: EXTERNAL
    authenticatePeer: yes
    requireEncryption: yes
    requireSsl: yes
    maxFrameSize: 16384
    ssl-profile: ssl-dispatch-server
}

linkRoutePattern {
    prefix: Broker.
}

fixedAddress {
    prefix: /closest/
    fanout: single
    bias: closest
}

fixedAddress {
    prefix: /multicast/
    fanout: multiple
}

fixedAddress {
    prefix: /queue/
    phase:  0
    fanout: single
    bias:   closest
}

fixedAddress {
    prefix: /queue/
    phase:  1
    fanout: single
    bias:   closest
}

fixedAddress {
    prefix: /unicast
    fanout: single
    bias: closest
}

fixedAddress {
    prefix: /exclusive
    fanout: single
    bias: closest
}

fixedAddress {
    prefix: /broadcast
    fanout: multiple
}

fixedAddress {
    prefix: /
    fanout: multiple
}

